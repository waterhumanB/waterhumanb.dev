{"pageProps":{"slug":"var-let-const-hoisting","allBlogData":[{"slug":"코어-자바스크립트-질문-리스트","title":"코어 자바스크립트 질문 리스트","date":"2024년 11월 25일","description":"코어 자바스크립트를 읽고 프론트엔드 개발자로 생각 할 수 있는 기술면접 질문 리스트","thumbnail":"","category":"JavaScript"},{"slug":"자바스크립트-TDD-With-Next-Step","title":"자바스크립트 TDD와 jest 기본 사용법","date":"2023년 7월 23일","description":"자바스크립트 TDD와 Jest 기본 사용 법 및 Next Step 시작","thumbnail":"","category":"JavaScript"},{"slug":"next.js-블로그-회고","title":"Next.js 블로그 첫 번째 회고","date":"2023년 6월 25일","description":"Next.js 블로그 개발 기능 설명 및 첫 번째 회고","thumbnail":"/profile.jpg","category":"Next.js"},{"slug":"점진적과부하-프로젝트-회고","title":"점진적과부하 프로젝트 회고","date":"2023년 5월 22일","description":"점진적과부하 개인 프로젝트 설명 및 회고","thumbnail":"","category":"React"},{"slug":"라이브러리-없이-캘린더-만들기","title":"라이브러리 없이 캘린더 만들기","date":"2023년 5월 15일","description":"라이브러리 없이 Date 메소드 활용 캘린더 만들기","thumbnail":"/assets/images/blog/calendar.png","category":"React"},{"slug":"라이브러리-없이-그래프,-차트-만들기","title":"라이브러리 없이 그래프, 차트 만들기","date":"2023년 5월 08일","description":"라이브러리 없이 SVG 태그를 활용 막대 그래프와 도넛 차트를 만드는 방법","thumbnail":"/assets/images/blog/SVG tag graphs and charts.png","category":"HTML"},{"slug":"Redux와-데이터정규화","title":"Redux와 데이터정규화","date":"2023년 5월 03일","description":"점진적 과부하 프로젝트에서 사용했던 리덕스와 데이터 정규화","thumbnail":"","category":"DataBase"},{"slug":"var-let-const-hoisting","title":"var, let, const 특징 및 호이스팅","date":"2023년 4월 25일","description":"var, let, const 키워드들의 특징과 차이점과 호이스팅에 대한 정리","thumbnail":"","category":"JavaScript"},{"slug":"StoryBook으로-컴포넌트-테스트","title":"StoryBook으로 컴포넌트 테스트","date":"2023년 4월 18일","description":"StoryBook을 사용하여 React에서 컴포넌트 테스트를 해보자!","thumbnail":"","category":"Storybook"},{"slug":"Controlled-컴포넌트와 UnCotrolled-컴포넌트의-차이점","title":"Controlled 컴포넌트와 UnControlled 컴포넌트 차이점","date":"2023년 4월 12일","description":"React에서 Controlled 컴포넌트와 UnControlled 컴포넌트의 차이점을 알아보자","thumbnail":"","category":"React"},{"slug":"React에서-컴포넌트와-로직-분리하는-방법","title":"React에서 컴포넌트와 로직 분리하는 방법","date":"2023년 4월 03일","description":"React에서 Hook, Utils, Domain으로 컴포넌트와 로직 분리하는 이유와 방법","thumbnail":"","category":"React"}],"fallback":{"@\"Props\",\"var-let-const-hoisting\",":{"slug":"var-let-const-hoisting","content":"\n## var 키워드 특징으로 인한 문제점 3가지\n\n1. 전역 변수 : `var` 키워드는 전역변수로 선언 할 수 있다. 변수는 유효 범위에 따라 지역 변수과 전역 변수로 구분이 되는데, `var` 키워드를 사용해서 전역 변수와 변수명이 겹쳐 값을 덮어씌우는 상황이 발생해 잘못 된 값을 참조하여 문제점이 발생할 수 있습니다.\n\n- 지역 변수 (local variable) : 함수 내에서 선연된 변수를 가르키고, 변수가 선언된 함수 내에서만 유효하고, 함수가 종료되면 메모리가 사라집니다.\n- 전역 변수 (global variable) : 함수 외에서 선언된 변수를 가르키고, 전역 페이지 어느 곳에서 접근할 수 있고, 웹페이지가 닫혀야만 메모리가 사라집니다.\n\n2. 중복 선언 가능 : 중복 선언으로 인한 문제점이 발생합니다. `let` 과 `const` 의 경우 같은 스코프에서 동일한 변수명으로 선언을 하게 된 경우 오류가 발생하는데, `var` 키워드는 동일한 변수명으로 선언해도 오류가 발생하지 않아 값이 달라져 에러가 발생하고, 유지 보수 등에 문제가 발생합니다.\n\n3. 변수 호이스팅 : `var` 키워드의 경우 선언된 후에 `undefined`로 초기화 되기 떄문에 참조를 해도 에러가 발생하지 않아, 예기치 못한 에러가 발생할 수 있어 개발, 유지 보수 등 문제가 발생할 수 있습니다.\n\n## let 키워드 특징 및 var 키워드와 차이점 4가지\n\n1. 중복 선언 불가능 : `let` 키워드는 재할당은 가능 하지만 동일한 스코프 안에서 중복 선언을 하게 되면 문법 에러가 발생해 재할당이 불가능 합니다. 이는 var 키워드를 사용 했을 때 문제점을 막아주는 역할을 합니다.\n\n2. 블록 단위 스코프 : `let` 키워드로 선언된 변수는 블록 단위 스코프를 따릅니다. 함수 뿐만 아니라 모든 코드의 블록 내에서 선언된 변수는 해당 유효 범위를 벗어나면 읽거나 사용할 수 없습니다.\n\n3. TDZ :`let` 키워드는 호이스팅시 초기화가 되지 않기 때문에 초기화를 하지 않고 읽거나 사용할 경우 참조 에러가 발생하여 var와 같은 변수 호이스팅 문제가 발생하지 않습니다. 이러한 선언 부터 초기화가 되는 시점, 변수를 참조 할 수 없는 영역을 `TDZ`(Temporal Dead Zone, 일시적 사각지대)라고 합니다.\n\n4. 지역 변수 : `let` 키워드는 지역 변수로 선언하기 때문에 var 키워드의 문제점인 전역 변수로 중복 선언되는 문제점이 없습니다.\n\n## const 키워드 특징 3가지\n\n1. 선언과 초기화 : `const` 키워드는 `let` 키워드와 다르게 선언과 초기화를 동시에 하지 않으면 문법 에러가 발생하게 됩니다.\n2. 재할당 불가능 : `var` 키워드, `let` 키워드는 재할당이 가능 하지만 const 키워드는 재할당이 불가능 합니다.\n3. 상수 : `const` 키워드로 선언한 변수에 원시값을 할당한 경우 변수 값을 변경할 수 없습니다. 원시 값은 변경이 불가능한 값이므로 재할당이 없이 값을 변경할 수 없어서 `const`를 사용하면 상수값으로 사용할 수 있습니다.\n\n- 원시값은 재할당이 불가능 하지만 객체같은 참조 값은 얼마든지 변경이 가능합니다. 그래서 함수나, 배열 메소드 등을 사용하여 새로운 변수를 만들 때 객체 값들을 변경해서 새로운 값이나 배열 등을 만들어도 오류가 생기지 않습니다.\n\n## 호이스팅이란?\n\n실행 컨텍스트의 생성 단계에서 변수 및 함수 선언을 해당 범위 최상단에 올리는 동작입니다.\n이러한 동작을 하게 되면 실제로 정의되기 전에 변수와 함수를 참조할 수 있지만 할당이 아닌 선언 자체만 호이스팅됩니다.\n","title":"var, let, const 특징 및 호이스팅","date":"2023년 4월 25일","description":"var, let, const 키워드들의 특징과 차이점과 호이스팅에 대한 정리","thumbnail":"","category":"JavaScript"}}},"__N_SSG":true}